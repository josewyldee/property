"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""



from pathlib import Path

import dj_database_url
import environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
environ.Env.read_env()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
 
SECRET_KEY =env('SECRET_KEY')

HEROKU = env.bool('HEROKU')
# print(HEROKU,"tttttttttttttttttttttttttttt")
DEBUG = True


LOGIN_URL = '/accounts/login/'
ALLOWED_HOSTS = ['*']

# postgres://gkqavagpsplppy:1cfd84e486cc206b09b461e211393caa8c299dbfc6ab1928a257a1ebb6644805@ec2-3-232-22-121.compute-1.amazonaws.com:5432/d41bptl8r1dkhr
# Application definition

INSTALLED_APPS = [
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
        
    #third-party
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'rest_framework',
     'widget_tweaks',
    # 'channels',
    # 'django_celery_results',
    # 'django_celery_beat',
    #  'django_crontab',
    #local
    'property',
    'tenant',
    'finance',
    'reports',
   
    'maintenance',
    'searchdata',
    'customAuth',
    'tenant_dashboard',
    'communications',
    'notifications',
    'chat',
    'django.contrib.humanize',
]
SITE_ID = 1
SITE_URL = env('SITE_URL')
SITE_PROTOCOL = env('SITE_PROTOCOL')
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
      'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.authentication_middleware.LoginRequiredMiddleware',
]
# CRONJOBS = [
#     ('*/1 * * * *', 'core.cron.my_scheduled_job2')
# ]
ROOT_URLCONF = 'core.urls'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
          "DIRS": [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]
WSGI_APPLICATION = 'core.wsgi.application'
# ASGI_APPLICATION = "core.routing.application"
# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\
# 
if HEROKU:
    # DATABASES = {}
    # DATABASES['default'] = dj_database_url.config(conn_max_age=600,)
    SECURE_SSL_REDIRECT = True
   

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME":env("POSTGRES_DB"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": env("POSTGRES_HOST"),
        "PORT": env("POSTGRES_PORT"),
    }
    }
REST_FRAMEWORK = {
    'DATETIME_FORMAT': "%m/%d/%Y %I:%M%P",
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        #

    ],
}
# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

#MEDIA SETTINGS
STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",

]
STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

#ACCOUNT SETTINGS
LOGIN_NOT_REQUIRED_URLS = [
    r'^accounts/(.*)$',
    r'^admin/(.*)$',
    r'^documents/(.*)$',
]
ALLOWED_TENANT_AREA = [
    r'^tenant_dashboard/(.*)$',
    r'^accounts/(.*)$',
    r'^maintenance/(.*)$',
    r'^media/(.*)$',
    r'^chat/(.*)$',
    r'^notifications/(.*)$',
]
ALLOWED_EMPLOYEE_AREA = [
 
    r'^select/(.*)$',
    r'^maintenance/(.*)$',
    r'^media/(.*)$',
    r'^chat/(.*)$',
    r'^notifications/(.*)$',
    r'^finance/(.*)$',
r'^accounts/(.*)$',
    # r'^finance/expenses/(.*)$',
    # r'^finance/expense-listcreate/(.*)$',
    # r'^finance/expense-rud/(.*)$',
    # r'^finance/payments/(.*)$',

    # r'^finance/payee/(.*)$',
    # r'^finance/payee-listcreate/(.*)$',
    # r'^finance/payee-rud/(.*)$',
]


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'

# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_SUBJECT_PREFIX = "Property Management"
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 10
# ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
LOGIN_REDIRECT_URL = "/property/dashboard/"

ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login/'
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_EMAIL_SUBJECT_PREFIX = "[Landlord message]"
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_EMAIL_VERIFICATION = "none"

AUTH_USER_MODEL = 'customAuth.User'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = env('EMAIL_HOST')
# EMAIL_USE_TLS = True
# EMAIL_PORT = 587
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')



# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

#AWS SETTINGS

# STATICFILES_STORAGE = env('STATICFILES_STORAGE')



# print("heyyyyyyyyyyyyyyyyyy hoset",env('EMAIL_HOST'),"ussser",env('EMAIL_HOST_USER'),"password",env('EMAIL_HOST_PASSWORD'))

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels.layers.InMemoryChannelLayer',
    
#     },
# }
















# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [env('REDIS_URL')],
#         },
#     },
# }
# # CELERY SETTINGS
# CELERY_BROKER_URL=env('REDIS_URL')
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Africa/Nairobi'
# CELERY_RESULT_BACKEND = 'django-db'

# # CELERY BEAT
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

